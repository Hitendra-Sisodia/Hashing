/* Given a non-empty array of integers, 
find the top k elements which have the highest frequency in the array. 
If two numbers have the same frequency then the larger number should be given preference. 
*/
// Note: Print the elements according to the frequency count 
// (from highest to lowest) and if the frequency is equal then larger number will be given preference.

#include<bits/stdc++.h>
using namespace std;

vector<int> topK(vector<int>& nums, int k) {
    unordered_map<int,int> mpp;
    vector<pair<int,int>> vp;
    vector<int> ans;
    for(int i = 0 ; i < nums.size() ; i++){                     // O(N LOG N)
        mpp[nums[i]]++;
    }
    for(auto it: mpp){                                          // O(N LOG N)
        vp.push_back(make_pair(it.second,it.first));
    }
    sort(vp.rbegin(),vp.rend());                                // O(N LOG N)
    for(int i=0 ; i<k ; i++){                                   // O(K)
        ans.push_back(vp[i].second);
    }
    return ans;
}
int main()
{
    vector<int> arr = {1,1,1,2,2,3};
    int k = 2;
    vector<int> ans = topK(arr,k);
    for(auto it: ans){
        cout<<it<<" "<<endl;
    }
}
